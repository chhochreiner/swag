package at.ac.tuwien.swag.model.domain.quartz;

// Generated Jun 11, 2011 5:07:29 PM by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * QrtzJobDetails generated by hbm2java
 */
@Entity
@Table(name = "qrtz_job_details", schema = "public")
public class QrtzJobDetails implements java.io.Serializable {

	private QrtzJobDetailsId id;
	private String description;
	private String jobClassName;
	private boolean isDurable;
	private boolean isNonconcurrent;
	private boolean isUpdateData;
	private boolean requestsRecovery;
	private byte[] jobData;
	private Set<QrtzTriggers> qrtzTriggerses = new HashSet<QrtzTriggers>( 0 );

	public QrtzJobDetails() {
	}

	public QrtzJobDetails( QrtzJobDetailsId id, String jobClassName,
			boolean isDurable, boolean isNonconcurrent, boolean isUpdateData,
			boolean requestsRecovery ) {
		this.id = id;
		this.jobClassName = jobClassName;
		this.isDurable = isDurable;
		this.isNonconcurrent = isNonconcurrent;
		this.isUpdateData = isUpdateData;
		this.requestsRecovery = requestsRecovery;
	}

	public QrtzJobDetails( QrtzJobDetailsId id, String description,
			String jobClassName, boolean isDurable, boolean isNonconcurrent,
			boolean isUpdateData, boolean requestsRecovery, byte[] jobData,
			Set<QrtzTriggers> qrtzTriggerses ) {
		this.id = id;
		this.description = description;
		this.jobClassName = jobClassName;
		this.isDurable = isDurable;
		this.isNonconcurrent = isNonconcurrent;
		this.isUpdateData = isUpdateData;
		this.requestsRecovery = requestsRecovery;
		this.jobData = jobData;
		this.qrtzTriggerses = qrtzTriggerses;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "schedName", column = @Column(name = "sched_name", nullable = false, length = 120)),
			@AttributeOverride(name = "jobName", column = @Column(name = "job_name", nullable = false, length = 200)),
			@AttributeOverride(name = "jobGroup", column = @Column(name = "job_group", nullable = false, length = 200)) })
	public QrtzJobDetailsId getId() {
		return this.id;
	}

	public void setId( QrtzJobDetailsId id ) {
		this.id = id;
	}

	@Column(name = "description", length = 250)
	public String getDescription() {
		return this.description;
	}

	public void setDescription( String description ) {
		this.description = description;
	}

	@Column(name = "job_class_name", nullable = false, length = 250)
	public String getJobClassName() {
		return this.jobClassName;
	}

	public void setJobClassName( String jobClassName ) {
		this.jobClassName = jobClassName;
	}

	@Column(name = "is_durable", nullable = false)
	public boolean isIsDurable() {
		return this.isDurable;
	}

	public void setIsDurable( boolean isDurable ) {
		this.isDurable = isDurable;
	}

	@Column(name = "is_nonconcurrent", nullable = false)
	public boolean isIsNonconcurrent() {
		return this.isNonconcurrent;
	}

	public void setIsNonconcurrent( boolean isNonconcurrent ) {
		this.isNonconcurrent = isNonconcurrent;
	}

	@Column(name = "is_update_data", nullable = false)
	public boolean isIsUpdateData() {
		return this.isUpdateData;
	}

	public void setIsUpdateData( boolean isUpdateData ) {
		this.isUpdateData = isUpdateData;
	}

	@Column(name = "requests_recovery", nullable = false)
	public boolean isRequestsRecovery() {
		return this.requestsRecovery;
	}

	public void setRequestsRecovery( boolean requestsRecovery ) {
		this.requestsRecovery = requestsRecovery;
	}

	@Column(name = "job_data")
	public byte[] getJobData() {
		return this.jobData;
	}

	public void setJobData( byte[] jobData ) {
		this.jobData = jobData;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "qrtzJobDetails")
	public Set<QrtzTriggers> getQrtzTriggerses() {
		return this.qrtzTriggerses;
	}

	public void setQrtzTriggerses( Set<QrtzTriggers> qrtzTriggerses ) {
		this.qrtzTriggerses = qrtzTriggerses;
	}

}
