«IMPORT metamodel»

«EXTENSION template::GeneratorExtensions»

«DEFINE main FOR Model»
	«EXPAND dto FOREACH entities()»
«ENDDEFINE»

«DEFINE dto FOR Entity»
	«FILE packagePath() + "/dto/" + name + "DTO.java"»
		package «package()».dto;

		import java.util.*;
		
		import at.ac.tuwien.swag.model.domain.BuildingType;
		import at.ac.tuwien.swag.model.domain.RessourceBuildingType;
		import at.ac.tuwien.swag.model.domain.SharedRessourceType;
		import at.ac.tuwien.swag.model.domain.RessourceType;
		import at.ac.tuwien.swag.model.domain.SoldierType;

		public class «name»DTO extends AbstractDTO {
			//*** constructors
			
			// no arg constructor
			public «name»DTO() {/**/}	
		
			«IF !fields().forAll( f | !f.nullable ) && fields().exists( f | !f.nullable ) »
				// constructor for all fields that mustn't be null
				public «name»DTO( «FOREACH fields().select( f | !f.nullable ) AS f SEPARATOR ", "»«f.dtoTypeName()» «f.name»«ENDFOREACH») {
					«FOREACH fields() AS f»
						this.«f.setter()»( «f.name» );
					«ENDFOREACH»
				}
			«ENDIF»
		
			// all fields constructor
			public «name»DTO(«FOREACH fields() AS f SEPARATOR ", "»«f.dtoTypeName()» «f.name»«ENDFOREACH») {
				«FOREACH fields() AS f»
					this.«f.setter()»( «f.name» );
				«ENDFOREACH»
			}
		
			//*** getters
			«FOREACH attributes AS attr»
				public «attr.dtoTypeName()» «attr.getter()»() {
					return «attr.name»;
				}
			«ENDFOREACH»
			
			«FOREACH associations AS assoc»
				public «assoc.dtoTypeName()» «assoc.getter()»() {
					«IF assoc.multiplicity == Multiplicity::ManyToMany || assoc.multiplicity == Multiplicity::OneToMany»
						if ( «assoc.name» == null ) «assoc.name» = new «assoc.dtoConcreteType()»();
					«ENDIF»

					return «assoc.name»;
				}
			«ENDFOREACH»
			
			//*** setters
			«FOREACH fields() AS f»
				public void «f.setter()»(«f.dtoTypeName()» «f.name») {
					this.«f.name» = «f.name»;
				}
			«ENDFOREACH»
			
			//*** alternate setters which allow method chaining
			
			«FOREACH fields() AS f»
				public «name»DTO «f.name»(«f.dtoTypeName()» «f.name») {
					this.«f.name» = «f.name»;
					return this;
				}
			«ENDFOREACH»
			
			//*** misc
			
			public String toString() {
				return 
					"«name»[" +
						«FOREACH fields().sortBy(e|e.name) AS f SEPARATOR " + \", \" + "»
							"«f.name»: " + toString( «f.getter()»() )
						«ENDFOREACH»
					+ "]"
				;
			}
			
			//*** PRIVATE PARTS
			«FOREACH fields() AS f»
				private «f.dtoTypeName()» «f.name»;
			«ENDFOREACH»
		}
	«ENDFILE»
«ENDDEFINE»
